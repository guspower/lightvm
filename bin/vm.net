#!/bin/bash

ipv4pattern="[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*"

function net.configureBridge() {
	local ip=$1
	local mask=$2
    local bridge=${bridge:-"br0"}
    local brctl=${brctl:-"brctl"}
    local ifconfig=${ifconfig:-"ifconfig"}

	${brctl} show | grep -q $bridge
	if [ $? -ne 0 ];
	then
		$mode ${brctl} addbr $bridge
		$mode ${brctl} setfd $bridge 0
		$mode ${brctl} sethello $bridge 0
		$mode ${brctl} stp $bridge off
	fi

	${ifconfig} $bridge | grep -q 'UP '
	if [ $? -ne 0 ];
	then
		$mode ${ifconfig} $bridge up
	fi

	${ifconfig} $bridge | grep -q "addr:$ip.*Mask:$mask"
	if [ $? -ne 0 ];
	then
	        $mode ${ifconfig} $bridge $ip
	        $mode ${ifconfig} $bridge netmask $mask $ip
	fi
}

function net.hostNetworking() {
	local __hostipvar=$1
	local __hostifacevar=$2

	local pingcmd=${pingcmd:-"ping"}
	local hostnamecmd=${hostnamecmd:-"hostname"}
	local ifconfigcmd=${ifconfigcmd:-"ifconfig"}

    #Why is this so f-ugly and hard?
    local localhostname=`$hostnamecmd`
    local localhostip=${hostip:-`$pingcmd -c1 $localhostname | head -n 1 | sed "s/.*(\(${ipv4pattern}\)).*/\1/"`}
    local localhostiface=${hostiface:-`$ifconfigcmd | grep -B1 $localhostip | cut -f1 -d" "`}

    eval $__hostipvar="'$localhostip'"
	eval $__hostifacevar="'$localhostiface'"
}

function net.updateContainerConfig() {
    local containername=$1
    local containerdir=$2
    local containerip=$3
    local containermasknum=$4

    $mode sed -i "s,${ipv4pattern}\/[0-9],$containerip/$containermasknum,g" "$containerdir/etc/conf.d/net"
    $mode echo "hostname=$containername" > ${modelog:-$containerdir/etc/conf.d/hostname}
}

function net.enableIpForwarding() {
    local ipforward=${ipforward:-"/proc/sys/net/ipv4/ip_forward"}

    local enabled=`cat $ipforward`
    if [ "$enabled" != "1" ];
    then
        $mode echo 1 > ${modelog:-$ipforward}
    fi
}

function net.enableNAT() {
    local hostip=$1
    local hostiface=$2

    local iptablescmd=${iptablescmd:-"iptables"}

    $mode iptables -t nat -A POSTROUTING -o $hostiface -j SNAT --to-source $hostip
}

function net.nextIpAddress() {
    if [ ! -f $confdir/nextip ];
    then
        echo -e "first=10\nsecond=0\nthird=0\nfourth=2" > $confdir/nextip
    fi

	. $confdir/nextip

	local __ipvar=$1
	local __gwvar=$2
	local __maskvar=$3
	local __masknumvar=$4

	local localip="${first}.${second}.${third}.${fourth}"
	local localgw="${first}.0.0.1"
	local localmask="255.0.0.0"
	local localmasknum="8"

	local fourth=`expr $fourth + 1`
	if [ $fourth -ge 255 ];
	then
		fourth=1
		third=`expr $third + 1`
	fi

	$mode echo -e "first=${first}\nsecond=${second}\nthird=${third}\nfourth=${fourth}" > ${modelog:-$confdir/nextip}

	eval $__ipvar="'$localip'"
	eval $__gwvar="'$localgw'"
	eval $__maskvar="'$localmask'"
	eval $__masknumvar="'$localmasknum'"
}

function net.addToHosts() {
	local host=$1
	local value=$2

	$mode util.addOrUpdate /etc/hosts $host $value
}

function net.containerSummary() {
    local host=$1

    echo -e "\tssh   : ssh root@$host"
}